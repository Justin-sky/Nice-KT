// automatically generated by the FlatBuffers compiler, do not modify

package fb

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
@ExperimentalUnsignedTypes
class heroconfigTR : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : heroconfigTR {
        __init(_i, _bb)
        return this
    }
    val Id : Int
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    val Baseatk : Float
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getFloat(o + bb_pos) else 0.0f
        }
    val Sp : Float
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getFloat(o + bb_pos) else 0.0f
        }
    val Hp : Float
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getFloat(o + bb_pos) else 0.0f
        }
    val Attackdistance : Float
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getFloat(o + bb_pos) else 0.0f
        }
    val Attackinterval : Float
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getFloat(o + bb_pos) else 0.0f
        }
    override fun keysCompare(o1: Int, o2: Int, _bb: ByteBuffer) : Int {
        val val_1 = _bb.getInt(__offset(4, o1, _bb))
        val val_2 = _bb.getInt(__offset(4, o2, _bb))
        return (val_1 - val_2).sign
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_1_12_0()
        fun getRootAsheroconfigTR(_bb: ByteBuffer): heroconfigTR = getRootAsheroconfigTR(_bb, heroconfigTR())
        fun getRootAsheroconfigTR(_bb: ByteBuffer, obj: heroconfigTR): heroconfigTR {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createheroconfigTR(builder: FlatBufferBuilder, Id: Int, Baseatk: Float, Sp: Float, Hp: Float, Attackdistance: Float, Attackinterval: Float) : Int {
            builder.startTable(6)
            addAttackinterval(builder, Attackinterval)
            addAttackdistance(builder, Attackdistance)
            addHp(builder, Hp)
            addSp(builder, Sp)
            addBaseatk(builder, Baseatk)
            addId(builder, Id)
            return endheroconfigTR(builder)
        }
        fun startheroconfigTR(builder: FlatBufferBuilder) = builder.startTable(6)
        fun addId(builder: FlatBufferBuilder, Id: Int) = builder.addInt(0, Id, 0)
        fun addBaseatk(builder: FlatBufferBuilder, Baseatk: Float) = builder.addFloat(1, Baseatk, 0.0)
        fun addSp(builder: FlatBufferBuilder, Sp: Float) = builder.addFloat(2, Sp, 0.0)
        fun addHp(builder: FlatBufferBuilder, Hp: Float) = builder.addFloat(3, Hp, 0.0)
        fun addAttackdistance(builder: FlatBufferBuilder, Attackdistance: Float) = builder.addFloat(4, Attackdistance, 0.0)
        fun addAttackinterval(builder: FlatBufferBuilder, Attackinterval: Float) = builder.addFloat(5, Attackinterval, 0.0)
        fun endheroconfigTR(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun __lookup_by_key(obj: heroconfigTR?, vectorLocation: Int, key: Int, bb: ByteBuffer) : heroconfigTR? {
            var span = bb.getInt(vectorLocation - 4)
            var start = 0
            while (span != 0) {
                var middle = span / 2
                val tableOffset = __indirect(vectorLocation + 4 * (start + middle), bb)
                val value = bb.getInt(__offset(4, bb.capacity() - tableOffset, bb))
                val comp = value.compareTo(key)
                when {
                    comp > 0 -> span = middle
                    comp < 0 -> {
                        middle++
                        start += middle
                        span -= middle
                    }
                    else -> {
                        return (obj ?: heroconfigTR()).__assign(tableOffset, bb)
                    }
                }
            }
            return null
        }
    }
}
