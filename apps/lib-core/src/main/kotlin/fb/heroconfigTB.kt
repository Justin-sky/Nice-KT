// automatically generated by the FlatBuffers compiler, do not modify

package fb

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
@ExperimentalUnsignedTypes
class heroconfigTB : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : heroconfigTB {
        __init(_i, _bb)
        return this
    }
    fun heroconfigTRS(j: Int) : fb.heroconfigTR? = heroconfigTRS(fb.heroconfigTR(), j)
    fun heroconfigTRS(obj: fb.heroconfigTR, j: Int) : fb.heroconfigTR? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val heroconfigTRSLength : Int
        get() {
            val o = __offset(4); return if (o != 0) __vector_len(o) else 0
        }
    fun heroconfigTRSByKey(key: Int) : fb.heroconfigTR? {
        val o = __offset(4)
        return if (o != 0) {
            fb.heroconfigTR.__lookup_by_key(null, __vector(o), key, bb)
        } else {
            null
        }
    }
    fun heroconfigTRSByKey(obj: fb.heroconfigTR, key: Int) : fb.heroconfigTR? {
        val o = __offset(4)
        return if (o != 0) {
            fb.heroconfigTR.__lookup_by_key(obj, __vector(o), key, bb)
        } else {
            null
        }
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_1_12_0()
        fun getRootAsheroconfigTB(_bb: ByteBuffer): heroconfigTB = getRootAsheroconfigTB(_bb, heroconfigTB())
        fun getRootAsheroconfigTB(_bb: ByteBuffer, obj: heroconfigTB): heroconfigTB {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createheroconfigTB(builder: FlatBufferBuilder, heroconfigTRSOffset: Int) : Int {
            builder.startTable(1)
            addHeroconfigTRS(builder, heroconfigTRSOffset)
            return endheroconfigTB(builder)
        }
        fun startheroconfigTB(builder: FlatBufferBuilder) = builder.startTable(1)
        fun addHeroconfigTRS(builder: FlatBufferBuilder, heroconfigTRS: Int) = builder.addOffset(0, heroconfigTRS, 0)
        fun createHeroconfigTRSVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startHeroconfigTRSVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endheroconfigTB(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishheroconfigTBBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset)
        fun finishSizePrefixedheroconfigTBBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset)
    }
}
