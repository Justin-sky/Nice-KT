// automatically generated by the FlatBuffers compiler, do not modify

package fb

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
@ExperimentalUnsignedTypes
class skillconfigTB : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : skillconfigTB {
        __init(_i, _bb)
        return this
    }
    fun skillconfigTRS(j: Int) : fb.skillconfigTR? = skillconfigTRS(fb.skillconfigTR(), j)
    fun skillconfigTRS(obj: fb.skillconfigTR, j: Int) : fb.skillconfigTR? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val skillconfigTRSLength : Int
        get() {
            val o = __offset(4); return if (o != 0) __vector_len(o) else 0
        }
    fun skillconfigTRSByKey(key: Int) : fb.skillconfigTR? {
        val o = __offset(4)
        return if (o != 0) {
            fb.skillconfigTR.__lookup_by_key(null, __vector(o), key, bb)
        } else {
            null
        }
    }
    fun skillconfigTRSByKey(obj: fb.skillconfigTR, key: Int) : fb.skillconfigTR? {
        val o = __offset(4)
        return if (o != 0) {
            fb.skillconfigTR.__lookup_by_key(obj, __vector(o), key, bb)
        } else {
            null
        }
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_1_12_0()
        fun getRootAsskillconfigTB(_bb: ByteBuffer): skillconfigTB = getRootAsskillconfigTB(_bb, skillconfigTB())
        fun getRootAsskillconfigTB(_bb: ByteBuffer, obj: skillconfigTB): skillconfigTB {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createskillconfigTB(builder: FlatBufferBuilder, skillconfigTRSOffset: Int) : Int {
            builder.startTable(1)
            addSkillconfigTRS(builder, skillconfigTRSOffset)
            return endskillconfigTB(builder)
        }
        fun startskillconfigTB(builder: FlatBufferBuilder) = builder.startTable(1)
        fun addSkillconfigTRS(builder: FlatBufferBuilder, skillconfigTRS: Int) = builder.addOffset(0, skillconfigTRS, 0)
        fun createSkillconfigTRSVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSkillconfigTRSVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endskillconfigTB(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishskillconfigTBBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset)
        fun finishSizePrefixedskillconfigTBBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset)
    }
}
